# hierher set to Digits to 20 to avoid wiggles
Digits:=15;

interface(errorbreak=2);
with(plots):
with(LinearAlgebra):
with(plottools): 
with(DEtools):
interface(echo=4);
 	

currentdir("/home/mheil/tmp_marc_git/MarcCollapsibleChannel/maple");


#=================================================================
# Linear oscillator model for Marc's problem.
#=================================================================

#-------------------------------------------------------------------
# Parameters used in paper
#-------------------------------------------------------------------
Marc_parameters:=[L_up=5,L_elast=10,L_dn=10,
                  sigma_0=1e3,HoR=1e-2,H=1e7];



#=================================================================
# Marc's parameters vs mine.
#=================================================================

# Tweak parameters for length
beta_up:=1/4;
beta_dn:=1/4;


#-----------------------------------------------------------------
# Eigenfrequency squared: Wo_0^4. Marc's fits give 0.02 for this quantity.
#-----------------------------------------------------------------
alpha_crit_to_the_fourth_div_by_H:=12*HoR*sigma_0*((L_up+beta_up*L_elast)+
(L_dn+beta_dn*L_elast))/(L_elast^3*(L_up+beta_up*L_elast)*
(L_dn+beta_dn*L_elast));

subs(Marc_parameters,alpha_crit_to_the_fourth_div_by_H);


#-----------------------------------------------------------------
# Forcing factor: alpha_f. Marc's fits give 4.2 for this quantity.
#-----------------------------------------------------------------
alpha_f:=18*(L_up+L_elast+L_dn)/(L_elast*(L_up+beta_up*L_elast));


subs(Marc_parameters,alpha_f);




#=================================================================
# Oliver's analysis vs. mine
#=================================================================

#-----------------------------------------------------------------
# solve Det(oej_matrix) = 0 for z; then beta_oej = z^2. 
#-----------------------------------------------------------------
oej_matrix:=Matrix(4,4):
oej_matrix[1,1]:=0:
oej_matrix[1,2]:=1:
oej_matrix[1,3]:=0:
oej_matrix[1,4]:=1:

oej_matrix[2,1]:=L1_hat*z:
oej_matrix[2,2]:=-1:
oej_matrix[2,3]:=L1_hat*z:
oej_matrix[2,4]:=1:

oej_matrix[3,1]:=sinh(z):
oej_matrix[3,2]:=cosh(z):
oej_matrix[3,3]:=-sin(z):
oej_matrix[3,4]:=cos(z):

oej_matrix[4,1]:=sinh(z)+L2_hat*z*cosh(z):
oej_matrix[4,2]:=cosh(z)+L2_hat*z*sinh(z):
oej_matrix[4,3]:=sin(z)+L2_hat*z*cos(z):
oej_matrix[4,4]:=-cos(z)+L2_hat*z*sin(z):


#-----------------------------------------------------------------
# Here's my approximation: L{1,2}_hat = L{up,dn}/L_elast
#-----------------------------------------------------------------
beta_approx:=sqrt(12*(L1_hat+L2_hat)/(L1_hat*L2_hat)):
beta_approx_tweak_1_o_1:=sqrt(12*(2+L1_hat+L2_hat)/((1+L1_hat)*(1+L2_hat))):
beta_approx_tweak_1_o_2:=sqrt(12*(1+L1_hat+L2_hat)/((1/2+L1_hat)*(1/2+L2_hat))):
beta_approx_tweak_1_o_3:=sqrt(12*(2/3+L1_hat+L2_hat)/((1/3+L1_hat)*(1/3+L2_hat))):
beta_approx_tweak_1_o_4:=sqrt(12*(1/2+L1_hat+L2_hat)/((1/4+L1_hat)*(1/4+L2_hat))):


#-----------------------------------------------------------------
# My approximation should be good for long upstream/downstream
# channels. Compare by stretching them relative to Marc's geometry.
# Plot alpha_eig.
#-----------------------------------------------------------------
count:=1:
for stretch_factor from 1 by 1 to 20 do 
    oej_params:=subs(Marc_parameters,
      [L1_hat=L_up/L_elast*stretch_factor,L2_hat=L_dn/L_elast*stretch_factor]):
    x_plot[count]:=stretch_factor:
    test_det:=subs(oej_params,Determinant(oej_matrix)):
    beta_oej:=(fsolve(test_det=0,z=subs(oej_params,sqrt(beta_approx))))^2:
    y_plot_oej[count]:=subs(Marc_parameters,
                            (HoR*sigma_0*H/L_elast^4*beta_oej^2)^(1/4)):

    beta_mine:=evalf(subs(oej_params,beta_approx)): 
    y_plot_mine[count]:=subs(Marc_parameters,
                            (HoR*sigma_0*H/L_elast^4*beta_mine^2)^(1/4)):

    beta_mine_tweak_1_o_1:=evalf(subs(oej_params,beta_approx_tweak_1_o_1)): 
    y_plot_mine_tweak_1_o_1[count]:=subs(Marc_parameters,
                            (HoR*sigma_0*H/L_elast^4*beta_mine_tweak_1_o_1^1)^(1/4)):

    beta_mine_tweak_1_o_2:=evalf(subs(oej_params,beta_approx_tweak_1_o_2)): 
    y_plot_mine_tweak_1_o_2[count]:=subs(Marc_parameters,
                            (HoR*sigma_0*H/L_elast^4*beta_mine_tweak_1_o_2^2)^(1/4)):

    beta_mine_tweak_1_o_3:=evalf(subs(oej_params,beta_approx_tweak_1_o_3)): 
    y_plot_mine_tweak_1_o_3[count]:=subs(Marc_parameters,
                            (HoR*sigma_0*H/L_elast^4*beta_mine_tweak_1_o_3^2)^(1/4)):

    beta_mine_tweak_1_o_4:=evalf(subs(oej_params,beta_approx_tweak_1_o_4)): 
    y_plot_mine_tweak_1_o_4[count]:=subs(Marc_parameters,
                            (HoR*sigma_0*H/L_elast^4*beta_mine_tweak_1_o_4^2)^(1/4)):
    count:=count+1:
end do:
count:=count-1:
x_seq := [seq(x_plot[i], i = 1 .. count)]:
y_seq_oej := [seq(y_plot_oej[i], i = 1 .. count)]:
oej_plot:=plot(x_seq,y_seq_oej,colour=green):
y_seq_mine := [seq(y_plot_mine[i], i = 1 .. count)]:
mine_plot:=plot(x_seq,y_seq_mine,colour=red,labels=["stretch_factor","alpha_eig"]):
y_seq_mine_tweak_1_o_1 := [seq(y_plot_mine_tweak_1_o_1[i], i = 1 .. count)]:
mine_plot_tweak_1_o_1:=plot(x_seq,y_seq_mine_tweak_1_o_1,colour=orange,labels=["stretch_factor","alpha_eig"]):
y_seq_mine_tweak_1_o_2 := [seq(y_plot_mine_tweak_1_o_2[i], i = 1 .. count)]:
mine_plot_tweak_1_o_2:=plot(x_seq,y_seq_mine_tweak_1_o_2,colour=pink,labels=["stretch_factor","alpha_eig"]):
y_seq_mine_tweak_1_o_3 := [seq(y_plot_mine_tweak_1_o_3[i], i = 1 .. count)]:
mine_plot_tweak_1_o_3:=plot(x_seq,y_seq_mine_tweak_1_o_3,colour=black,labels=["stretch_factor","alpha_eig"]):
y_seq_mine_tweak_1_o_4 := [seq(y_plot_mine_tweak_1_o_4[i], i = 1 .. count)]:
mine_plot_tweak_1_o_4:=plot(x_seq,y_seq_mine_tweak_1_o_4,colour=blue,labels=["stretch_factor","alpha_eig"]):


display(mine_plot,oej_plot,mine_plot_tweak_1_o_1,mine_plot_tweak_1_o_2,mine_plot_tweak_1_o_3,mine_plot_tweak_1_o_4);


#-----------------------------------------------------------------
# Try to replicate Oliver's Fig. 2; not very good
#-----------------------------------------------------------------
beta_approx_log:=sqrt(12*(10^(log_L1_hat)+10^(log_L2_hat))/
                         (10^(log_L1_hat)*10^(log_L2_hat)));

contourplot(beta_approx_log,
        log_L1_hat=log10(0.01)..log10(100),
        log_L2_hat=log10(0.01)..log10(100),
        contours=[1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5]);


#-----------------------------------------------------------------
# Try to replicate Oliver's Fig. 2 with tweaked effective lengths: 
# Better though not perfect.
#-----------------------------------------------------------------
# Tweak parameters for length
beta_up:=1/4;
beta_dn:=1/4;

beta_approx_log:=sqrt(12*  (beta_up+10^(log_L1_hat)  +  beta_dn+10^(log_L2_hat)) /
                         ( (beta_up+10^(log_L1_hat)) * (beta_dn+10^(log_L2_hat)) ) );

contourplot(beta_approx_log,
        log_L1_hat=log10(0.01)..log10(100),
        log_L2_hat=log10(0.01)..log10(100),
        contours=[1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5]);





#=================================================================
# Here's my analysis
#=================================================================


#-------------------------------------------------------------------
# Some integral needed in the hand-calculation (integral of assumed
# membrane mode shape of normalised domain
#-------------------------------------------------------------------
K_integral:=int(4*x*(1-x),x=0..1);


#-------------------------------------------------------------------
# Displacement amplitude of membrane
#-------------------------------------------------------------------
Y(t):=Y_hat*exp(I*alpha^2*t);

#-------------------------------------------------------------------
# Pressure under membrane
#-------------------------------------------------------------------
p_under_membrane:=k*Y(t);

#-------------------------------------------------------------------
# Oscillatory pressure at inlet (L_total is non-dim on a)
#-------------------------------------------------------------------
p_inlet:=12*L_total*Reynolds*exp(I*alpha^2*t);

#-------------------------------------------------------------------
# Veloc in upstream bit
#-------------------------------------------------------------------
u_up(y,t):=f_up(y)*exp(I*alpha^2*t);

#-------------------------------------------------------------------
# Pressure gradient in upstream bit (L_up is non-dim on a)
#-------------------------------------------------------------------
dpdx_up(t):=(p_under_membrane-p_inlet)/(Beta_up*L_elast+L_up);


#-------------------------------------------------------------------
# ODE for upstream velocity profile
#-------------------------------------------------------------------
ode_up:=simplify((diff(u_up(y,t),t)+dpdx_up(t)-diff(u_up(y,t),y$2))/
        exp(I*alpha^2*t));

#-------------------------------------------------------------------
# Solve the bloody thing
#-------------------------------------------------------------------
soln_up:=dsolve({ode_up,f_up(0)=0,f_up(1)=0},f_up(y));
assign(soln_up);
test_up_1:=simplify(subs(y=0,f_up(y)));
test_up_2:=simplify(subs(y=1,f_up(y)));




#-------------------------------------------------------------------
# Veloc in downstream bit
#-------------------------------------------------------------------
u_dn(y,t):=f_dn(y)*exp(I*alpha^2*t);

#-------------------------------------------------------------------
# Pressure gradient in downstream bit (L_dn is non-dim on a)
#-------------------------------------------------------------------
dpdx_dn(t):=(0-p_under_membrane)/(Beta_dn*L_elast+L_dn);

#-------------------------------------------------------------------
# ODE for downstream velocity profile
#-------------------------------------------------------------------
ode_dn:=simplify((diff(u_dn(y,t),t)+dpdx_dn(t)-diff(u_dn(y,t),y$2))/
        exp(I*alpha^2*t));


#-------------------------------------------------------------------
# Solve the bloody thing
#-------------------------------------------------------------------
soln_dn:=dsolve({ode_dn,f_dn(0)=0,f_dn(1)=0},f_dn(y));
assign(soln_dn);
test_dn_1:=simplify(subs(y=0,f_dn(y)));
test_dn_2:=simplify(subs(y=1,f_dn(y)));





#-------------------------------------------------------------------
# Overall continuity
#-------------------------------------------------------------------
conti_eqn:=K*diff(Y(t),t)/exp(I*alpha^2*t)-
        (int(f_up(y),y=0..1)-int(f_dn(y),y=0..1)):

#-------------------------------------------------------------------
# Solve the bastard
#-------------------------------------------------------------------
y_hat:=solve(conti_eqn,Y_hat):



#===================================================================
# Now do a few plots...
#===================================================================



#-------------------------------------------------------------------
# Loop over sigma \times H factor
#-------------------------------------------------------------------
sigma_h_factor_index:=1;
sigma_h_factor_list:=[0.01,0.1,1,2,5,7.5,10];
#sigma_h_factor_list:=[0.00001,
#                      0.0001,
#                      0.001,
#                      0.01,
#                      0.1,
#                      1.0,
#                     10.0];
for sigma_h_factor in sigma_h_factor_list do 


#-------------------------------------------------------------------
# Loop over beta factor
#-------------------------------------------------------------------
#for beta_tweak_factor in [0, 0.25] do
for beta_tweak_factor in [0.25] do



#-------------------------------------------------------------------
# Apply substitutions
#-------------------------------------------------------------------
Substitution_list:=[Beta_up=beta_tweak_factor,Beta_dn=beta_tweak_factor,
                    k=sigma_h_factor*8*HoR*sigma_0/L_elast^2*H,K=2/3*L_elast,
                    L_total=L_up+L_elast+L_dn];

simplified_y_hat:=simplify(subs(Substitution_list,y_hat));





#-------------------------------------------------------------------
#Loop over Reynolds numbers
#-------------------------------------------------------------------
re_list:=[50, 100, 150, 200];
for re_for_plot in re_list do 

Marc_parameters_with_reynolds:=[op(Marc_parameters),Reynolds=re_for_plot];


#-------------------------------------------------------------------
# Y_hat for Marc's values
#-------------------------------------------------------------------
y_hat_to_be_plotted:=subs(Marc_parameters_with_reynolds,simplified_y_hat);

#-------------------------------------------------------------------
# Inviscid eigenfrequency on viscous scale; omega = \alpha^2
#-------------------------------------------------------------------
inviscid_eigenfrequency:=subs(Substitution_list,
        sqrt(k/K*((L_dn+Beta_dn*L_elast)+(L_up+Beta_up*L_elast))/
             ((L_dn+Beta_dn*L_elast)*(L_up+Beta_up*L_elast))));


#-------------------------------------------------------------------
# Womersley number corresponding to inviscid eigenfrequency. This is
# the square root of the eigenfrequency! alpha_crit = sqrt(omega_crit)
#-------------------------------------------------------------------
inviscid_alpha_crit_to_be_plotted:=sqrt(evalf(subs(Marc_parameters,
    inviscid_eigenfrequency)));


#-------------------------------------------------------------------
# Full eigenvalue problem (setting Reynolds to zero sets the
# driving pressure to zero; we want non-trivial solutions, i.e.
# values of alpha for which this expression is zero for non-zero 
# Y_hat)
#-------------------------------------------------------------------
eigenvalue_eqn:=simplify(
   subs(Substitution_list,subs(Reynolds=0,conti_eqn)/Y_hat));

eigenvalue_eqn_to_be_fsolved:=subs(Marc_parameters,eigenvalue_eqn);


#-------------------------------------------------------------------
# Solve the bastard, using the inviscid value as an initial guess
#-------------------------------------------------------------------
viscous_eigen_alpha:=fsolve(eigenvalue_eqn_to_be_fsolved,
                     alpha=inviscid_alpha_crit_to_be_plotted);



#-------------------------------------------------------------------
# "Gain" function from linear oscillator ODE with the terms for
# d^2 Y/dt^2, Y and RHS from the actual model and the viscous
# effect represented by a modelled 2 \delta_{damp} dY/dT term.
#-------------------------------------------------------------------
marc_inviscid_gain:=18*(L_up+L_elast+L_dn)*re_for_plot/
 ((L_elast*(L_up+Beta_up*L_elast))*     (inviscid_eigenfrequency^2-alpha^4) );
marc_viscous_gain :=18*(L_up+L_elast+L_dn)*re_for_plot/
 ((L_elast*(L_up+Beta_up*L_elast))*sqrt((inviscid_eigenfrequency^2-alpha^4)^2
   +(2*delta_damp*alpha^2)^2));


#-------------------------------------------------------------------
# Plot amplitude y_hat (or gain) as fct of alpha
#-------------------------------------------------------------------


#-------------------------------------------------------------------
# Range for big plots
#-------------------------------------------------------------------
alpha_min_for_plot:=6;
alpha_max_for_plot:=50; #30;
y_hat_min_for_plot:=1.0e-5;
y_hat_max_for_plot:=1.0;


#-------------------------------------------------------------------
# Get maximum amplitude
#-------------------------------------------------------------------
y_max:=0;
alpha_max:=-10000;
nstep:=1000;
d_alpha:=(alpha_max_for_plot-alpha_min_for_plot)/nstep;
for alpha_test from alpha_min_for_plot by d_alpha to alpha_max_for_plot do
  y_test:=evalf(subs(alpha=alpha_test,abs(y_hat_to_be_plotted)));
  #print("bla",alpha_test,y_test,y_max);
  if y_test>y_max then y_max:=y_test; alpha_max:=evalf(alpha_test); end if;
end do;
print("alpha_max,y_max=",alpha_max,y_max);


 
#-------------------------------------------------------------------
# Log plot of "inviscid gain" (based on ODE model without damping).
# Red for the most wrong.
#-------------------------------------------------------------------
inviscid_gain_amplitude_plot[re_for_plot]:=
logplot(abs(subs(Substitution_list,subs(Marc_parameters_with_reynolds,
marc_inviscid_gain))),alpha=alpha_min_for_plot..alpha_max_for_plot,
                      y=y_hat_min_for_plot..y_hat_max_for_plot,caption = 
                      typeset("Inviscid Gain"),colour=red);


#-------------------------------------------------------------------
# Log plot of "viscous gain" (based on ODE model with selected values
# of damping parameter delta_damp). Blue for not totally wrong.
#-------------------------------------------------------------------
delta_damp_list:=[];
for delta_damp_for_plot from 10 by 10 to 30 do 
delta_damp_list:=[op(delta_damp_list),delta_damp_for_plot];
viscous_gain_amplitude_plot[delta_damp_for_plot][re_for_plot]:=
logplot(abs(subs(delta_damp=delta_damp_for_plot,(Substitution_list,
        subs(Marc_parameters_with_reynolds,marc_viscous_gain)))),
        alpha=alpha_min_for_plot..alpha_max_for_plot,
        y=y_hat_min_for_plot..y_hat_max_for_plot,
        caption = typeset("Viscous Gain"),colour=blue);  
end do;                                                  

#-------------------------------------------------------------------
# Log plot of actual amplitude (from time-harmonic solution of model
# PDE (green for correct)
#-------------------------------------------------------------------
amplitude_plot[re_for_plot]:=
logplot(abs(y_hat_to_be_plotted),
        alpha=alpha_min_for_plot..alpha_max_for_plot,
        y=y_hat_min_for_plot..y_hat_max_for_plot,
        caption = typeset("Amplitude for Re=",re_for_plot,"; H x sigma_0 = ",
                   subs(Marc_parameters,sigma_0*H*sigma_h_factor)),
        colour=green);


#-------------------------------------------------------------------
# Eigenfrequencies:
#-------------------------------------------------------------------
Y_hat_max:=y_hat_max_for_plot;

#-------------------------------------------------------------------
# Inviscid, same from Marc's ODE model and mine with zero viscosity
# (red)
#-------------------------------------------------------------------
inviscid_resonance_plot := logplot([inviscid_alpha_crit_to_be_plotted, y, 
                                 y = y_hat_min_for_plot .. y_hat_max_for_plot],
                                  colour = red, 
                                 linestyle=dash);
#-------------------------------------------------------------------
# Viscous from unforced solution of my model eqn (therefore green)
#-------------------------------------------------------------------
viscous_resonance_plot := logplot([Re(viscous_eigen_alpha), y, 
                                 y = y_hat_min_for_plot .. y_hat_max_for_plot],
                                 colour = green,
                                 linestyle=dot);

#-------------------------------------------------------------------
# Keep track
#-------------------------------------------------------------------
viscous_eigen_alpha_for_plot[sigma_h_factor_index][re_for_plot]:=
Re(viscous_eigen_alpha);


#-------------------------------------------------------------------
# Find the damping factor that matches the "exact" max. amplitude
#-------------------------------------------------------------------

#-------------------------------------------------------------------
# Where's the maximum attained? Exclude zero
#-------------------------------------------------------------------
alpha_max_gain:=0;
all_alpha_max_gain := solve(diff(marc_viscous_gain, alpha) = 0, alpha);
for i from 1 to numelems([all_alpha_max_gain]) do
    if all_alpha_max_gain[i] <> 0 then 
       alpha_max_gain:=all_alpha_max_gain[i];
    end if;
end do;

#-------------------------------------------------------------------
# What's the gain there? 
#-------------------------------------------------------------------
max_viscous_gain := subs(Substitution_list, subs(Marc_parameters_with_reynolds,
                         subs(alpha = alpha_max_gain, marc_viscous_gain)));

#-------------------------------------------------------------------
# Which value of delta_damp produces this amplitude? There seems
# to be a spurious value around...
#-------------------------------------------------------------------
delta_damp_matched := solve(max_viscous_gain = y_max, delta_damp);
positve_delta_damp_matched:=[];
for i from 1 to numelems([delta_damp_matched]) do
  val:=evalf(delta_damp_matched[i]);
  test:=subs(delta_damp=val,max_viscous_gain);
  print("Matching delta_damp = ",val," matched value: ",test);
  if  val>0 then
    positve_delta_damp_matched:=[op(positve_delta_damp_matched),val];
  end if;
end do;


#-------------------------------------------------------------------
# Plot curves and pick out the smaller of the values (which seems
# to be the non-spurious one
#-------------------------------------------------------------------
n_pos_matched:=numelems(positve_delta_damp_matched);
min_delta_damp:=positve_delta_damp_matched[1];
for i from 1 to n_pos_matched do
matched_viscous_gain_amplitude_plot[i][re_for_plot]:=
logplot(abs(subs(delta_damp=positve_delta_damp_matched[i],(Substitution_list,
        subs(Marc_parameters_with_reynolds,marc_viscous_gain)))),
        alpha=alpha_min_for_plot..alpha_max_for_plot,
        y=y_hat_min_for_plot..y_hat_max_for_plot,
        caption = typeset("Matched viscous Gain ",
                  positve_delta_damp_matched[i]),colour=orange);  
print(display(matched_viscous_gain_amplitude_plot[i][re_for_plot]));

# Pick out the smaller of the two
if positve_delta_damp_matched[i]<min_delta_damp then
    min_delta_damp:=positve_delta_damp_matched[i];
end if;

end do;


minimum_delta_damp[sigma_h_factor_index][re_for_plot]:=min_delta_damp;
print("Minimum delta damp: ",min_delta_damp);


#-------------------------------------------------------------------
# Plot the lot!
#-------------------------------------------------------------------
ampl_plot:=display(amplitude_plot[re_for_plot],
                   inviscid_gain_amplitude_plot[re_for_plot]);
for delta_damp_index in delta_damp_list do
   ampl_plot:=display(ampl_plot,
                viscous_gain_amplitude_plot[delta_damp_index][re_for_plot]);
end do;  
for i from 1 to n_pos_matched do
   ampl_plot:=display(ampl_plot,
               matched_viscous_gain_amplitude_plot[i][re_for_plot]);
end do;
ampl_plot:=display(ampl_plot,inviscid_resonance_plot,viscous_resonance_plot);
print(display(ampl_plot));




#-------------------------------------------------------------------
# And zoom in near the maximum
#-------------------------------------------------------------------
alpha_min_zoom:=alpha_max-1.0;
alpha_max_zoom:=alpha_max+1.0;
y_min_zoom:=0.1 *y_max;
y_max_zoom:=10.0*y_max;
print(zoom(ampl_plot, alpha_min_zoom..alpha_max_zoom,y_min_zoom..y_max_zoom));


#-------------------------------------------------------------------
# Plot phase
#-------------------------------------------------------------------
phase_plot:=
plot(arctan(Im(y_hat_to_be_plotted),Re(y_hat_to_be_plotted)),
            alpha=0..alpha_max_for_plot,
            caption = typeset("Phase for Re=",re_for_plot,"; H x sigma_0 = ",
                      subs(Marc_parameters,sigma_0*H*sigma_h_factor)),
            color=green);

Phase_min:=-Pi;

phase_inviscid_resonance_plot := 
plot([inviscid_alpha_crit_to_be_plotted, y, y = Phase_min .. 0], 
colour = red, linestyle=dash);

phase_viscous_resonance_plot := 
plot([Re(viscous_eigen_alpha), y, y = Phase_min .. 0], 
colour = green,linestyle=dot);

print(display(phase_plot,
              phase_inviscid_resonance_plot,
              phase_viscous_resonance_plot));


#------------------------------------------------------------------
# End of loop over Reynolds number
#------------------------------------------------------------------
end do;



#---------------------------------------------------
# Output data for comparison with Marc's results
#---------------------------------------------------
for re in re_list do
    bla := getdata(amplitude_plot[re]);
    nname := cat(currentdir(),"/ampl_beta_tweak_factor",
       convert(beta_tweak_factor,string),"_sigma_h_factor",
       convert(sigma_h_factor,string),"_re",convert(re,string),".dat");
    ExportMatrix(nname, bla[3]);
end do;



#---------------------------------------------------
# End of loop over beta_tweak (for effective length)
#---------------------------------------------------
end do;



#---------------------------------------------------
# End of loop over sigma_0 x H
#---------------------------------------------------
sigma_h_factor_index:=sigma_h_factor_index+1;
print("sigma_h_factor_index",sigma_h_factor_index);
end do;



#---------------------------------------------------
# Plot damping factor as fct of sigma0 x H (for all Reynolds
# numbers -- results agree to within roundoff; see below
# for numerical values)
#---------------------------------------------------
base_sigma0_H:=subs(Marc_parameters,sigma_0*H);
for re in re_list do
  damp_plot[re]:=plot([seq([subs(base_sigma0_H*sigma_h_factor_list[i]),
                                 minimum_delta_damp[i][re]],
                            i = 1..numelems(sigma_h_factor_list))]);
  damp_plot_with_symbol[re]:=plot([seq([subs(base_sigma0_H*sigma_h_factor_list[i]),
                                             minimum_delta_damp[i][re]],
                            i = 1..numelems(sigma_h_factor_list))],
                            style=point,symbol=circle,symbolsize=20);
end do;
display(seq(damp_plot[re], re in re_list),
        seq(damp_plot_with_symbol[re], re in re_list));


#---------------------------------------------------
# Plot alpha_eig as fct of sigma0 x H (for all Reynolds
# numbers -- results agree to within roundoff; see below
# for numerical values)
#---------------------------------------------------
for re in re_list do
  eigen_plot[re]:=plot([seq([subs(base_sigma0_H*sigma_h_factor_list[i]),
                                 viscous_eigen_alpha_for_plot[i][re]],
                            i = 1..numelems(sigma_h_factor_list))]);
  eigen_plot_with_symbol[re]:=plot([seq([subs(base_sigma0_H*sigma_h_factor_list[i]),
                                 viscous_eigen_alpha_for_plot[i][re]],
                            i = 1..numelems(sigma_h_factor_list))],
                            style=point,symbol=circle,symbolsize=20);
end do;
display(seq(eigen_plot[re], re in re_list),
        seq(eigen_plot_with_symbol[re], re in re_list));




#hierher
#for sigma_h_factor in sigma_h_factor_list do;
#for re in re_list do;
#  print("Re,sigma_h_factor, delta_damp: ",re,sigma_h_factor,
#         minimum_delta_damp[sigma_h_factor][re]);
#end do;
#end do;

